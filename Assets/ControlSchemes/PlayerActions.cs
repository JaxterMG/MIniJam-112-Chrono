//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ControlSchemes/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PlayerWalk"",
            ""id"": ""065158e0-6ed7-476d-b5c8-39ccc9dec0ff"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""0085e4c7-233f-4870-8179-af42de8800d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""505f4d20-665a-4ce1-916d-b51e954ad713"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b4a7d942-dfd1-47bf-bf79-8ae154029d4e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5c135e57-9a80-4945-b778-9a4939931cfc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""607744fd-e9cb-45eb-8796-f7cd849f7e67"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""15072cbf-c47d-4ea8-a34f-079f277eb90a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pc"",
            ""bindingGroup"": ""Pc"",
            ""devices"": []
        }
    ]
}");
        // PlayerWalk
        m_PlayerWalk = asset.FindActionMap("PlayerWalk", throwIfNotFound: true);
        m_PlayerWalk_Walk = m_PlayerWalk.FindAction("Walk", throwIfNotFound: true);
        m_PlayerWalk_Interact = m_PlayerWalk.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerWalk
    private readonly InputActionMap m_PlayerWalk;
    private IPlayerWalkActions m_PlayerWalkActionsCallbackInterface;
    private readonly InputAction m_PlayerWalk_Walk;
    private readonly InputAction m_PlayerWalk_Interact;
    public struct PlayerWalkActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerWalkActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_PlayerWalk_Walk;
        public InputAction @Interact => m_Wrapper.m_PlayerWalk_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerWalk; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerWalkActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerWalkActions instance)
        {
            if (m_Wrapper.m_PlayerWalkActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnWalk;
                @Interact.started -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerWalkActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerWalkActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerWalkActions @PlayerWalk => new PlayerWalkActions(this);
    private int m_PcSchemeIndex = -1;
    public InputControlScheme PcScheme
    {
        get
        {
            if (m_PcSchemeIndex == -1) m_PcSchemeIndex = asset.FindControlSchemeIndex("Pc");
            return asset.controlSchemes[m_PcSchemeIndex];
        }
    }
    public interface IPlayerWalkActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
